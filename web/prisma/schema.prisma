// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Removed duplicate models and enums from the schema file
// No additional code needed at the placeholder location
// Just keep the first occurrence of each model/enum and remove duplicates
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Threat Module Models
model ThreatCVE {
  id          String   @id @default(uuid())
  cveId       String   @unique
  dataType    String
  dataVersion String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Module relationship
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String

  // Relationships
  metadata  ThreatCVEMetadata?
  container ThreatContainer?
}

model ThreatCVEMetadata {
  id                String   @id @default(uuid())
  assignerOrgId     String
  assignerShortName String
  datePublished     DateTime
  dateReserved      DateTime
  dateUpdated       DateTime
  state             String

  // Relationship with ThreatCVE
  cve   ThreatCVE @relation(fields: [cveId], references: [id], onDelete: Cascade)
  cveId String    @unique
}

model ThreatContainer {
  id String @id @default(uuid())

  // Relationship with ThreatCVE
  cve   ThreatCVE @relation(fields: [cveId], references: [id], onDelete: Cascade)
  cveId String    @unique

  // Relationship with ThreatCNA
  cna ThreatCNA?
}

model ThreatCNA {
  id String @id @default(uuid())

  // Relationship with ThreatContainer
  container   ThreatContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)
  containerId String          @unique

  // Relationships with other models
  affected         ThreatAffected[]
  descriptions     ThreatDescription[]
  problemTypes     ThreatProblemType[]
  providerMetadata ThreatProviderMetadata?
  references       ThreatReference[]
  legacyV4Record   Json?
}

model ThreatAffected {
  id      String @id @default(uuid())
  product String
  vendor  String

  // Relationship with ThreatCNA
  cna   ThreatCNA @relation(fields: [cnaId], references: [id], onDelete: Cascade)
  cnaId String

  // Relationship with versions
  versions ThreatVersion[]

  @@index([vendor])
  @@index([product])
}

model ThreatVersion {
  id      String @id @default(uuid())
  status  String
  version String

  // Relationship with ThreatAffected
  affected   ThreatAffected @relation(fields: [affectedId], references: [id], onDelete: Cascade)
  affectedId String
}

model ThreatDescription {
  id    String @id @default(uuid())
  lang  String
  value String @db.Text

  // Relationship with ThreatCNA
  cna   ThreatCNA @relation(fields: [cnaId], references: [id], onDelete: Cascade)
  cnaId String
}

model ThreatProblemType {
  id String @id @default(uuid())

  // Relationship with ThreatCNA
  cna   ThreatCNA @relation(fields: [cnaId], references: [id], onDelete: Cascade)
  cnaId String

  // Relationship with descriptions
  descriptions ThreatProblemTypeDescription[]
}

model ThreatProblemTypeDescription {
  id          String @id @default(uuid())
  description String @db.Text
  lang        String
  type        String

  // Relationship with ThreatProblemType
  problemType   ThreatProblemType @relation(fields: [problemTypeId], references: [id], onDelete: Cascade)
  problemTypeId String
}

model ThreatProviderMetadata {
  id          String   @id @default(uuid())
  dateUpdated DateTime
  orgId       String
  shortName   String

  // Relationship with ThreatCNA
  cna   ThreatCNA @relation(fields: [cnaId], references: [id], onDelete: Cascade)
  cnaId String    @unique
}

model ThreatReference {
  id  String @id @default(uuid())
  url String

  // Relationship with ThreatCNA
  cna   ThreatCNA @relation(fields: [cnaId], references: [id], onDelete: Cascade)
  cnaId String
}

model Organization {
  id         String         @id @default(uuid())
  name       String
  users      User[]
  userGroups UserGroup[]
  modules    ModuleAccess[]
  ssoConfig  SSOConfig?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  Activity Activity[]
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  name              String?
  password          String?
  isAdmin           Boolean            @default(false)
  isEmailVerified   Boolean            @default(false)
  status            UserStatus         @default(PENDING)
  organizations     Organization[]
  userGroups        UserGroup[]
  invitations       Invitation[]
  ssoIdentifier     String?            @unique
  emailVerification EmailVerification?
  loginHistory      UserLoginHistory[]
  otpVerifications  OTPVerification[] // Add this line
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  Activity Activity[] @relation("UserActivities")

  PasswordReset PasswordReset[]
}

model EmailVerification {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGroup {
  id           String       @id @default(uuid())
  name         String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  users        User[]
  permissions  Permission[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([name, orgId])
}

model Module {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  permissions   Permission[]
  organizations ModuleAccess[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  ThreatCVE ThreatCVE[]
}

model Permission {
  id         String      @id @default(uuid())
  name       String
  module     Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId   String
  userGroups UserGroup[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([name, moduleId])
}

model ModuleAccess {
  id           String       @id @default(uuid())
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  module       Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId     String
  isEnabled    Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([orgId, moduleId])
}

model Invitation {
  id        String       @id @default(uuid())
  email     String
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  token     String       @unique
  expiresAt DateTime
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model SSOConfig {
  id           String       @id @default(uuid())
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @unique
  provider     String
  clientId     String
  clientSecret String
  enabled      Boolean      @default(false)
  settings     Json?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum UserStatus {
  ACTIVE
  BLOCKED
  PENDING
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model Activity {
  id           String           @id @default(uuid())
  user         User?            @relation("UserActivities", fields: [userId], references: [id])
  userId       String?
  organization Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  action       String
  category     ActivityCategory
  details      Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailThrottle {
  id            String    @id @default(uuid())
  email         String
  ipAddress     String?
  type          EmailType
  attemptCount  Int       @default(1)
  lastAttemptAt DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([email, type])
  @@index([ipAddress])
}

enum EmailType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  INVITATION
}

enum ActivityCategory {
  AUTH
  USER_MANAGEMENT
  ORGANIZATION
  MODULE_ACCESS
  PERMISSION
  SSO
  SYSTEM
}

model OTPVerification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserLoginHistory {
  id            String    @id @default(uuid())  // Changed from cuid() to uuid()
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  email         String
  success       Boolean
  failureReason String?
  ipAddress     String?   // Added optional fields
  userAgent     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([email])
}
